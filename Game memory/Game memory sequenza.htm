<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Memory Sequenziale</title>
  <!-- Bootstrap 5 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-KyZXEJ07Xr5zH9W1M4uQp3PD84c8x6QQwJeY9he0wHZtZ7e0gRkWojcHpOH41zFH" crossorigin="anonymous">
  <style>
    body {
      background: linear-gradient(to right, #ff7e5f, #feb47b); 
      font-family: 'Arial', sans-serif;
    }

    .button-light {
      opacity: 1 !important;
      transform: scale(1.2);
      box-shadow: 0 0 10px 4px rgba(255, 255, 255, 0.8);
    }

    .button-dim {
      background-color: #6c757d;
      transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .button-red { background-color: #e74c3c; }
    .button-blue { background-color: #3498db; }
    .button-green { background-color: #2ecc71; }
    .button-yellow { background-color: #f1c40f; }
    .button-purple { background-color: #9b59b6; }
    .button-orange { background-color: #f39c12; }
    .button-cyan { background-color: #1abc9c; }
    .button-pink { background-color: #e91e63; }

    .grid-container {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 10px;
      margin-top: 50px;
      max-width: 500px;
      margin: 0 auto;
    }

    .btn {
      height: 100px;
      width: 100px;
      font-size: 24px;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .message {
      margin-top: 20px;
      font-size: 20px;
      font-weight: bold;
    }

    #startBtn {
      margin-top: 40px;
    }

    #score {
      font-size: 22px;
      font-weight: bold;
    }

  </style>
</head>
<body class="bg-light">
  <div class="container text-center">
    <h1 class="my-4 text-white">Gioco Memory Sequenziale</h1>
    <button id="startBtn" class="btn btn-primary btn-lg mb-4">Inizia</button>
    <div class="grid-container" id="grid">
      <!-- Pulsanti dinamici -->
    </div>
    <div class="message text-white" id="message"></div>
    <div id="score" class="my-3 text-white">Punteggio: 0</div>
  </div>

  <!-- Bootstrap 5 JS  -->
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js" integrity="sha384-oBqDVmMz4fnFO9gybF7rDfjfS6j7kS2me8FE6F2knlN/8X73hxj4NO4gDkR3sZ48" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js" integrity="sha384-pzjw8f+ua7Kw1TIq0bYkK0xhrv5A2+G6I9R5PbbYce5Afoyfd3yD7T97tdf7p8a9" crossorigin="anonymous"></script>
  <script>
    let sequence = [];
    let userSequence = [];
    let score = 0;
    let gameActive = false;

    const grid = document.getElementById('grid');
    const startBtn = document.getElementById('startBtn');
    const message = document.getElementById('message');
    const scoreDisplay = document.getElementById('score');

    // Impostazione della griglia dei pulsanti
    function createGrid(rows = 4, cols = 4) {
      grid.innerHTML = ''; // Pulisce la griglia
      const colors = ['button-red', 'button-blue', 'button-green', 'button-yellow', 'button-purple', 'button-orange', 'button-cyan', 'button-pink'];
      let counter = 0;
      for (let i = 0; i < rows * cols; i++) {
        const button = document.createElement('button');
        button.classList.add('btn', 'button-dim', colors[counter % colors.length]);
        button.dataset.index = i;  // Aggiungi l'indice per riferimento
        button.addEventListener('click', () => handleUserInput(i));
        grid.appendChild(button);
        counter++;
      }
    }

    // Avvio del gioco
    startBtn.addEventListener('click', startGame);

    function startGame() {
      gameActive = true;
      score = 0;
      sequence = [];
      userSequence = [];
      scoreDisplay.textContent = `Punteggio: ${score}`;
      message.textContent = "Memorizza la sequenza!";
      createGrid();  // Crea la griglia
      nextRound();
    }

    // Genera il prossimo turno
    function nextRound() {
      userSequence = [];
      sequence.push(Math.floor(Math.random() * 16)); // Aggiunge un nuovo pulsante alla sequenza
      showSequence(sequence);
    }

    // Mostra la sequenza di pulsanti
    function showSequence(seq) {
      let index = 0;
      const interval = setInterval(() => {
        const btn = grid.children[seq[index]];
        btn.classList.add('button-light');
        setTimeout(() => {
          btn.classList.remove('button-light');
        }, 500);
        index++;

        if (index === seq.length) {
          clearInterval(interval);
          enableUserInput(true);
        }
      }, 1000);
    }

    // Abilita o disabilita l'input dell'utente
    function enableUserInput(enable) {
      const buttons = grid.children;
      for (let button of buttons) {
        button.disabled = !enable;
      }
    }

    // Gestisce l'input dell'utente
    function handleUserInput(index) {
      if (!gameActive) return;

      userSequence.push(index);  // Aggiungi l'input dell'utente alla sequenza

      // Controlla se l'input dell'utente Ã¨ corretto
      if (userSequence[userSequence.length - 1] !== sequence[userSequence.length - 1]) {
        // Se sbaglia
        message.textContent = "Hai sbagliato! Gioco finito.";
        gameActive = false;
        return;
      }

      // Se l'utente ha completato correttamente la sequenza
      if (userSequence.length === sequence.length) {
        score++;
        scoreDisplay.textContent = `Punteggio: ${score}`;
        message.textContent = "Hai indovinato, prossimo turno!";
        setTimeout(nextRound, 1000);
      }
    }
  </script>
</body>
</html>
